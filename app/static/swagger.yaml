swagger: "2.0"
info:
  title: "Mechanic API"
  description: "This API is used to create, update, and delete information for a mechanic shop"
  version: "1.0.0"

host: "127.0.0.1:5000"
schemes:
  - http

consumes:
  - application/json

produces:
  - application/json

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: |
      Token Required!
      Please enter your JWT token **with `Bearer` prefix** like:
      ```
      Bearer "JWT TOKEN"
      ```

paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: "login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a member specific token"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Login Credentials
          required: true
          schema:
            $ref: "#/definitions/CustomerLoginCredentials"
      responses:
        200:
          description: Successful login
          schema:
            $ref: "#/definitions/CustomerLoginResponse"
        401:
          description: Unauthorized - Invalid credentials
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create a new user."
      description: "Endpoint to create a new customer in our mechanic shop system. emails must be unique"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "New Customer added successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: JDoe@example.com
              phone: 111-222-3333
              address: 123 Main St
              role: customer
        404:
          description: "Customer field missing"
          schema:
            $ref: "#/definitions/ErrorResponse"

    get:
      tags:
        - Customers
      summary: "Returns all Customers"
      description: "Returns a paginated list of all customers."
      parameters:
        - name: page
          in: query
          type: integer
          required: false
          description: "Page number (default: 1)"
        - name: per_page
          in: query
          type: integer
          required: false
          description: "Number of results per page (default: 10)"
      responses:
        200:
          description: "Retrieved Customers Successfully"
          schema:
            $ref: "#/definitions/AllCustomers"
          examples:
            application/json:
              customers:
                - id: 2
                  name: Michael Doe
                  email: MDoe@example.com
                  phone: "333-444-2222"
                  address: 234 Main St
                  password: "*******"
                  role: customer
                - id: 3
                  name: John Doe
                  email: JDoe@example.com
                  phone: "111-222-3333"
                  address: 123 Main St
                  role: customer
              page: 1
              per_page: 10
              total_customers: 2

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: "Retrieve a single customer by ID"
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the customer to retrieve"
      responses:
        200:
          description: "Customer retrieved successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
        404:
          description: Customer not found
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      tags:
        - Customers
      summary: "Endpoint to update a customer"
      description: "Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their account"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the customer to update"
        - in: body
          name: body
          description: "Information required to update a Customer"
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Successfully Updated Customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: "Dohn Joe"
              email: "dohnj@example.com"
              phone: "111-222-3333"
              address: "321 Main St"
              role: "customer"
        401:
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Not allowed to perform this action
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Customer not found
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Customers
      summary: "Endpoint to delete a customer"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the customer to delete"
      responses:
        200:
          description: "Successfully Deleted Customer"
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "successfully deleted customer <customer_id>"
        401:
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Not allowed to perform this action
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Customer not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers/{id}/cars:
    post:
      tags:
        - Customers
      summary: "Endpoint for customer to add a car."
      description: "Endpoint for customer to add a car. Requires token authentication, customer must be logged in to add a car to their account"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "This route validates that the customer_id in the payload matches the authenticated tokenâ€™s sub field"
        - in: body
          name: body
          description: "Information needed to add a car as a customer"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerCarPayload"
      responses:
        200:
          description: "Car added successfully"
          schema:
            $ref: "#/definitions/CreateCustomerCarPayload"
          examples:
            application/json:
              color: "black"
              customer_id: 4
              id: 2
              make: "BMW"
              model: "M4"
              model_year: 2025
        400:
          description: "Validation Error missing information to create a car"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Not allowed to perform this action
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Customer not found
          schema:
            $ref: "#/definitions/ErrorResponse"

    get:
      tags:
        - Customers
      summary: "Get all cars for a specific customer"
      description: "Returns a list of all cars associated with the given customer ID"
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "the ID of the customer whose cars are being retrieved"
      responses:
        200:
          description: "Successfully retrieved cars for the customer"
          schema:
            type: array
            items:
              $ref: "#/definitions/CreateCustomerCarPayload"
        404:
          description: Customer not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /employees/login:
    post:
      tags:
        - Employees
      summary: "login endpoint for employees, (generates token)"
      description: "Validates employee credentials, generates and return a employee specific token"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Login Credentials for employee's
          required: true
          schema:
            $ref: "#/definitions/EmployeeLoginCredentials"
      responses:
        200:
          description: Successful login
          schema:
            $ref: "#/definitions/EmployeeLoginResponse"
        401:
          description: Unauthorized - Invalid credentials
          schema:
            $ref: "#/definitions/ErrorResponse"

  /employees:
    post:
      tags:
        - Employees
      summary: "Endpoint to create a new employee."
      description: "Endpoint to create a new employee in our mechanic shop system. emails must be unique"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/CreateEmployeePayload"
      responses:
        201:
          description: "New Employee added successfully"
          schema:
            $ref: "#/definitions/CreateEmployeeResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: JDoe@example.com
              phone: 111-222-3333
              address: 123 Main St
              role: mechanic
              salary: 100000
        404:
          description: "Validation Error - Missing or invalid fields"
          schema:
            $ref: "#/definitions/ErrorResponse"

    get:
      tags:
        - Employees
      summary: "Return all employee's"
      description: "Returns a paginated list of all employee's"
      parameters:
        - name: page
          in: query
          type: integer
          required: false
          description: "Page number (default: 1)"
        - name: per_page
          in: query
          type: integer
          required: false
          description: "Number of results per page (default: 10)"
      responses:
        200:
          description: "Retrieved Employees Successfully"
          schema:
            $ref: "#/definitions/AllEmployees"
          examples:
            application/json:
              employees:
                - id: 2
                  name: Joe
                  email: Joe@example.com
                  phone: 111-222-3333
                  address: 123 Main St
                  password: "******"
                  role: mechanic
                  salary: 100000
                - id: 3
                  name: Jane
                  email: Jane@example.com
                  phone: 222-333-4444
                  address: 123 Main St
                  password: "******"
                  role: mechanic
                  salary: 100000
              page: 1
              per_page: 10
              total_employees: 3

  /employees/working_tickets:
    get:
      tags:
        - Employees
      summary: "Returns all tickets employees are working on"
      description: "Returns an array of tickets being worked on by employee's"
      produces:
        - application/json
      responses:
        200:
          description: "Successfully retrieved ticket data for mechanics"
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "Mechanic's ID"
                name:
                  type: string
                  description: "Mechanic's name"
                ticket_count:
                  type: integer
                  description: "Number of tickets the mechanic is currently working on"
                ticket_ids:
                  type: array
                  items:
                    type: integer
                  description: "List of ticket IDs assigned to the mechanic"
          examples:
            application/json:
              - id: 1
                name: "John Smith"
                ticket_count: 3
                ticket_ids: [101, 102, 103]
              - id: 2
                name: "Alice Johnson"
                ticket_count: 2
                ticket_ids: [104, 105]
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /employees/{id}:
    get:
      tags:
        - Employees
      summary: "Retrieve a single employee by ID"
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the employee to retrieve"
      responses:
        200:
          description: "Employee retrieved successfully"
          schema:
            $ref: "#/definitions/CreateEmployeeResponse"
        404:
          description: Employee not found
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      tags:
        - Employees
      summary: "Endpoint to update a employee"
      description: "Endpoint to update a employee, this is a token authenticated route, and the user must be logged in to update their account"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the employee to update"
        - in: body
          name: body
          description: "Information required to update a Employee"
          required: true
          schema:
            $ref: "#/definitions/UpdateEmployeePayload"
      responses:
        200:
          description: "Successfully Updated Employee"
          schema:
            $ref: "#/definitions/UpdateEmployeeResponse"
          examples:
            application/json:
              id: 1
              name: "Rob Down"
              email: "dobr@example.com"
              phone: "111-222-3333"
              role: "mechanic"
              salary: 1000000
        401:
          description: Unauthorized - Missing or Invalid token
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Not allowed to perform this action
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Employee not found
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - Employees
      summary: "Endpoint to delete an Employee"
      description: "Endpoint to delete a employee. Requires token authentication, employee must be loggen in to delete their account"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the employee to delete"
      responses:
        200:
          description: "Successfully Deleted Employee"
          schema:
            $ref: "#/definitions/DeleteEmployeeResponse"
          examples:
            application/json:
              message: "Successfully delete employee <employee_id>"
        401:
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Not allowed to perform this action
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Employee not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tickets:
    post:
      tags:
        - Service Tickets
      summary: "Create a new service ticket"
      description:
        Creates a new service ticket in the system. Requires admin authentication and supports assigning multiple service types.
        If `is_major_damage` is true, the ticket will also be sent to a sister site.
        Validates all `service_type_ids` provided. If any ID is invalid (doesn't exist), returns a 400 with a list of invalid IDs.
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: JSON payload to create the service ticket (with optional service_type_ids array)
          required: true
          schema:
            type: object
            required:
              - service_date
              - customer_id
              - car_id
              - VIN
              - car_issue
              - is_major_damage
            properties:
              service_date:
                type: string
                format: date
                example: "2025-05-25"
              customer_id:
                type: integer
              car_id:
                type: integer
              VIN:
                type: string
                description: "The vehicle identification number"
              car_issue:
                type: string
                description: "The issue reported with the car"
              is_major_damage:
                type: boolean
              service_type_ids:
                type: array
                items:
                  type: integer
                description: List of service type ID's to associate with the ticket
      responses:
        201:
          description: "Successfully created the ticket"
          schema:
            type: object
            properties:
              message:
                type: string
              ticket:
                $ref: "#/definitions/ServiceTicket"
          examples:
            application/json:
              message: "Ticket created"
              ticket:
                id: 10
                service_date: "2025-05-25"
                customer_id: 1
                car_id: 2
                VIN: "1HGCM82633A004352"
                car_issue: "Brakes not working"
                is_major_damage: false
                services:
                  - id: 1
                    name: "Oil Change"
        400:
          description: Bad Request - Validation Error
          schema:
            type: object
            properties:
              message:
                type: string
              invalid_ids:
                type: array
                items:
                  type: integer
          example:
            message: "Invalid service_type_ids"
            invalid_ids: [888, 1234]
        401:
          description: Unauthorized - Token missing or invalid
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Admin access required
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    get:
      tags:
        - Service Tickets
      summary: "Gets all tickets currently in the system"
      descriptions: "Returns a list of all tickets with details on what is being worked on and what car it is assigned to"
      parameters:
        - name: page
          in: query
          type: integer
          required: false
          description: "Page number (default: 1)"
        - name: per_page
          in: query
          type: integer
          required: false
          description: "Number of results per page (default: 10)"
      responses:
        200:
          description: "Retrieved all tickets successfully"
          schema:
            $ref: "#/definitions/AllTickets"
          examples:
            application/json:
              tickets:
                - id: 1
                  service_date: "2025-06-01"
                  customer_id: 1
                  car_id: 1
                  VIN: 123
                  car_issue: "Oil Leak"
                  is_major_damage: false
                  services:
                    - id: 1
                      name: "Oil Change"
                - id: 2
                  service_date: "2025-05-25"
                  customer_id: 2
                  car_id: 2
                  VIN: 234
                  car_issue: "Tire Fix"
                  is_major_damage: false
                  services:
                    - id: 2
                      name: "Tire Replacement"
              page: 1
              per_page: 10
              total_tickets: 2

  /tickets/{id}:
    get:
      tags:
        - Service Tickets
      summary: "Gets tickets by ID"
      description: "Returns full ticket details including assigned services, customer and car IDs, and damage info"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "The ID of the service ticket to retrieve"
      responses:
        200:
          description: Ticket retrieved successfully
          schema:
            $ref: "#/definitions/ServiceTicket"
          examples:
            application/json:
              id: 10
              service_date: "2025-05-25"
              customer_id: 1
              car_id: 2
              VIN: "1HGCM82633A004352"
              car_issue: "Brake failure"
              is_major_damage: false
              services:
                - id: 1
                  name: "Oil Change"
        401:
          description: Unauthorized - Token missing or invalid
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      tags:
        - Service Tickets
      summary: "Update an existing service ticket"
      description: |
        Updates an existing ticketâ€™s data. Requires admin authentication.

        If `service_type_ids` is provided, validates all IDs and associates them with the ticket.
      security:
        - bearerAuth: []
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "The ID of the service ticket to update"
        - in: body
          name: body
          description: Updated ticket payload
          required: true
          schema:
            type: object
            required:
              - service_date
              - customer_id
              - car_id
              - VIN
              - car_issue
              - is_major_damage
            properties:
              service_date:
                type: string
                format: date
                example: "2025-06-01"
              customer_id:
                type: integer
              car_id:
                type: integer
              VIN:
                type: string
              car_issue:
                type: string
              is_major_damage:
                type: boolean
              service_type_ids:
                type: array
                items:
                  type: integer
                description: Optional list of service type IDs to update associations
      responses:
        200:
          description: Successfully updated ticket
          schema:
            type: object
            properties:
              message:
                type: string
              ticket:
                $ref: "#/definitions/ServiceTicket"
          examples:
            application/json:
              message: "Ticket updated"
              ticket:
                id: 10
                service_date: "2025-06-01"
                customer_id: 1
                car_id: 2
                VIN: "1HGCM82633A004352"
                car_issue: "Brake pads replaced"
                is_major_damage: false
                services:
                  - id: 2
                    name: "Brake Replacement"
        400:
          description: Bad Request - Validation Error or Invalid service_type_ids
          schema:
            type: object
            properties:
              message:
                type: string
              invalid_ids:
                type: array
                items:
                  type: integer
        401:
          description: Unauthorized - Token missing or invalid
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden - Admin access required
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  CustomerLoginCredentials:
    type: "object"
    required:
      - email
      - password
      - role
    properties:
      email:
        type: "string"
        description: "User's email address"
      password:
        type: "string"
        description: "User's password"
      role:
        type: "string"
        description: "Specify's as customer"

  CustomerLoginResponse:
    type: "object"
    properties:
      Status:
        type: "string"
        description: "Status of the login attempt"
      auth_token:
        type: "string"
        description: "JWT access token"
      message:
        type: "string"
        description: "Response message"

  ErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    required:
      - name
      - email
      - phone
      - address
      - password
      - role
    properties:
      name:
        type: "string"
        description: "Customer's full name"
      email:
        type: "string"
        description: "Customer's email address"
      phone:
        type: "string"
        description: "Customer's phone number(e.g. 222-333-4444)"
      address:
        type: "string"
        description: "Customer's home address"
      password:
        type: "string"
        description: "Customer-created password"
      role:
        type: "string"
        description: "Identifies the user as a customer"

  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      address:
        type: "string"
      role:
        type: "string"

  AllCustomers:
    type: "object"
    properties:
      customers:
        type: "array"
        items:
          $ref: "#/definitions/CreateCustomerResponse"
      page:
        type: "integer"
      per_page:
        type: "integer"
      total_customers:
        type: "integer"

  UpdateCustomerPayload:
    allOf:
      - $ref: "#/definitions/CreateCustomerResponse"

  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      customer:
        $ref: "#/definitions/CreateCustomerResponse"

  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"

  CreateCustomerCarPayload:
    type: "object"
    required:
      - color
      - make
      - model
      - model_year
      - customer_id
    properties:
      color:
        type: "string"
        description: "Color of the car customer is adding"
      make:
        type: "string"
        description: "The brand of the car (e.g. Kia, BMW, Toyota)"
      model:
        type: "string"
        description: "The model name of the car (e.g. Forte, M4, Camry)"
      model_year:
        type: "integer"
        description: "The year of the car when it was made"
      customer_id:
        type: "integer"
        description: "The ID of the customer you are adding to must be the same as the customer logged in"

  EmployeeLoginCredentials:
    type: "object"
    required:
      - email
      - password
      - role
    properties:
      email:
        type: "string"
        description: "Employee's email address"
      password:
        type: "string"
        description: "Employee's password"
      role:
        type: "string"
        description: "Role of the employee gives certain permissions to different actions in the system (e.g. creating a ticket)"

  EmployeeLoginResponse:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Status of the login attempt"
      auth_token:
        type: "string"
        description: "JWT access token"
      message:
        type: "string"
        description: "Response message"

  CreateEmployeePayload:
    type: "object"
    required:
      - name
      - email
      - phone
      - address
      - password
      - role
      - salary
    properties:
      name:
        type: "string"
        description: "Employee's Full name"
      email:
        type: "string"
        description: "Employee's email"
      phone:
        type: "string"
        description: "Employee's phone number (e.g. 111-222-3333)"
      address:
        type: "string"
        description: "Employee's home address"
      password:
        type: "string"
        description: "Employee-created password"
      role:
        type: "string"
        description: "identifies the user as an employee"
      salary:
        type: "integer"
        description: "How much the employee make's"

  CreateEmployeeResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      address:
        type: "string"
      role:
        type: "string"
      salary:
        type: "integer"

  AllEmployees:
    type: "object"
    properties:
      employees:
        type: "array"
        items:
          $ref: "#/definitions/CreateEmployeeResponse"
      page:
        type: "integer"
      per_page:
        type: "integer"
      total_employees:
        type: "integer"

  UpdateEmployeePayload:
    allOf:
      - $ref: "#/definitions/CreateEmployeeResponse"

  UpdateEmployeeResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      employee:
        $ref: "#/definitions/CreateEmployeeResponse"

  DeleteEmployeeResponse:
    type: "object"
    properties:
      message:
        type: "string"

  ServiceTicket:
    type: object
    properties:
      id:
        type: integer
      VIN:
        type: string
      car_issue:
        type: string
      service_date:
        type: string
        format: date
      customer_id:
        type: integer
      car_id:
        type: integer
      is_major_damage:
        type: boolean
      services:
        type: array
        items:
          $ref: "#/definitions/ServiceType"

  ServiceType:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
